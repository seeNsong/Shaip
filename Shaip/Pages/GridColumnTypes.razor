@page "/GridColumnTypes"
@using Demo.Blazor.Services
@inject WeatherForecastService ForecastService

<div class="demo-description">
    <h2>Data Grid - Column Types</h2>

    <p>
        This demo demonstrates the different column types supported by the DevExpress <a class="helplink" target="_blank" href="https://docs.devexpress.com/Blazor/DevExpress.Blazor.DxDataGrid-1#columns">Data Grid</a> for Blazor.
    </p>
    <ul>
        <li>
            <p><a class="helplink" target="_blank" href="https://docs.devexpress.com/Blazor/DevExpress.Blazor.DxDataGridCommandColumn">DxDataGridCommandColumn</a> - Displays data management commands such as New, Edit, Delete, Update, and so on.</p>
        </li>
        <li>
            <p><a class="helplink" target="_blank" href="https://docs.devexpress.com/Blazor/DevExpress.Blazor.DxDataGridDateEditColumn">DxDataGridDateEditColumn</a> (Date) - Uses a drop-down calendar control to edit column values.</p>
        </li>
        <li>
            <p><a class="helplink" target="_blank" href="https://docs.devexpress.com/Blazor/DevExpress.Blazor.DxDataGridColumn">DxDataGridColumn</a> (Summary) - Default column type that displays strings and uses a text box to edit values.</p>
        </li>
        <li>
            <p><a class="helplink" target="_blank" href="https://docs.devexpress.com/Blazor/DevExpress.Blazor.DxDataGridSpinEditColumn">DxDataGridSpinEditColumn</a> (Temp. (&#x2103;)) - Uses a spin editor with up/down buttons to edit column values.</p>
        </li>
        <li>
            <p><a class="helplink" target="_blank" href="https://docs.devexpress.com/Blazor/DevExpress.Blazor.DxDataGridComboBoxColumn-1">DxDataGridComboBoxColumn</a> (Cloudiness) - Uses a combobox control to edit column values.</p>
        </li>
        <li>
            <p><a class="helplink" target="_blank" href="https://docs.devexpress.com/Blazor/DevExpress.Blazor.DxDataGridCheckBoxColumn">DxDataGridCheckBoxColumn</a> (Precipitates) - Displays a disabled checkbox that is replaced with a combobox when users filter column values.</p>
        </li>
    </ul>
    <p>
        Click the Edit command in any row to see the integrated data editors displayed by the columns listed above.
    </p>
</div>

<DxDataGrid DataAsync="@ForecastService.GetForecastAsync"
            PageSize="5"
            ShowFilterRow="false"
            RowRemovingAsync="@OnRowRemoving"
            RowUpdatingAsync="@OnRowUpdating"
            RowInsertingAsync="@OnRowInserting"
            InitNewRow="@OnInitNewRow"
            style="width:70%">

    <DxDataGridCommandColumn Width="150px"></DxDataGridCommandColumn>

    <DxDataGridDateEditColumn Field="@nameof(WeatherForecast.Date)" DisplayFormatString="D" EditFormatString="D"></DxDataGridDateEditColumn>

    <DxDataGridColumn Field="@nameof(WeatherForecast.Summary)" Caption="Summary" Width="150px"></DxDataGridColumn>

    <DxDataGridSpinEditColumn Field="@nameof(WeatherForecast.TemperatureC)" Caption="@("Temp. (\x2103)")" TextAlignment="@DataGridTextAlign.Left" Width="150px"></DxDataGridSpinEditColumn>        

    <DxDataGridComboBoxColumn Field="@nameof(WeatherForecast.WeatherType)" Caption="Cloudiness" DataAsync="@ForecastService.GetCloudinessAsync" TextAlignment="@DataGridTextAlign.Left" Width="150px"></DxDataGridComboBoxColumn>

    <DxDataGridCheckBoxColumn Field="@nameof(WeatherForecast.Precipitates)" Caption="Precipitates" Width="100px"></DxDataGridCheckBoxColumn>

</DxDataGrid>

<CodeSnippet_GridColumnTypes></CodeSnippet_GridColumnTypes>

@code {
    async Task OnRowRemoving(WeatherForecast dataItem) {
        await ForecastService.Remove(dataItem);
    }
    async Task OnRowUpdating(WeatherForecast dataItem, IDictionary<string, object> newValue) {
        await ForecastService.Update(dataItem, newValue);
    }
    async Task OnRowInserting(IDictionary<string, object> newValue) {
        await ForecastService.Insert(newValue);
    }
    Task OnInitNewRow (Dictionary<string, object> values) {
        values.Add("Date", DateTime.Now);
        values.Add("TemperatureC", 13);
        values.Add("Summary", "Warm");
        values.Add("WeatherType", "Sunny");
        return Task.CompletedTask;
    }
}

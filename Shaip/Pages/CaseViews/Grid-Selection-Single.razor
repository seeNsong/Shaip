@using Demo.Blazor.Model
@using Demo.Blazor.Services
@inject FlatProductService FlatProductService

<div class="demo-description" id="SingleSelectedDataRow">
    <h2><DemoNavLink Link="GridSelection#SingleSelectedDataRow" />Data Grid - Single Row Selection</h2>
    <p>
        The <a class="helplink" target="_blank" href="https://docs.devexpress.com/Blazor/DevExpress.Blazor.DxDataGrid-1#row-selection">Data Grid</a> component allows users to click a row to select it. 
        Use the <a class="helplink" target="_blank" href="https://docs.devexpress.com/Blazor/DevExpress.Blazor.Base.DxDataGridBase-1.SingleSelectedDataRow">SingleSelectedDataRow</a> property to specify the selected data row in code. 
        To track selection changes in this mode, use the <a class="helplink" target="_blank" href="https://docs.devexpress.com/Blazor/DevExpress.Blazor.Base.DxDataGridBase-1.SingleSelectedDataRowChanged">SingleSelectedDataRowChanged</a> event or the two-way synchronization as demonstrated in this module.
    </p>
</div>

@if (DataSource == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="card demo-card-wide border-bottom-0" style="border-bottom-left-radius: 0; border-bottom-right-radius: 0">
        <div class="card-header border-bottom-0">Selected Product: <b>@(SelectedProduct == null ? "(none)" : SelectedProduct.ProductName)</b></div>
    </div>

    <DxDataGrid Data="@DataSource"
                CssClass="datagrid-border-radius-top-0"
                @bind-SingleSelectedDataRow="@SelectedProduct"
                ShowFilterRow="false">
        <DxDataGridColumn Field="@nameof(ProductFlat.ProductName)" Caption="Product Name"></DxDataGridColumn>
        <DxDataGridColumn Field="@nameof(ProductFlat.Category)"></DxDataGridColumn>
        <DxDataGridColumn Field="@nameof(ProductFlat.Subcategory)"></DxDataGridColumn>
    </DxDataGrid>

    <div class="code-snippet card demo-card-wide">
        <CodeSnippetHeader></CodeSnippetHeader>
        <div class="card-footer text-muted">
            <CodeSnippet_Grid_Selection_Single />
        </div>
    </div>
}

@code {
    IQueryable<ProductFlat> DataSource;

    ProductFlat selectedProduct;
    public ProductFlat SelectedProduct
    {
        get
        {
            return selectedProduct;
        }
        set
        {
            selectedProduct = value;
            InvokeAsync(StateHasChanged);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        DataSource = await FlatProductService.Load();
        SelectedProduct = DataSource.First();
    }
}
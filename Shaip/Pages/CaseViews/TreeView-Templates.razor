@using Demo.Blazor.Model

<div class="demo-description" id="Templates">
    <h2>
        <DemoNavLink Link="TreeView#Templates" />TreeView - Templates
    </h2>
    <p>
        The DevExpress <a class="helplink" target="_blank" href="https://docs.devexpress.com/Blazor/DevExpress.Blazor.DxTreeView">TreeView</a> component for Blazor allows you to define custom templates for its nodes.
    </p>
    <p>
        Use the following <a class="helplink" target="_blank" href="https://docs.devexpress.com/Blazor/DevExpress.Blazor.DxTreeView">DxTreeView</a> properties to provide a common node template and a text template for all nodes:
    </p>
    <ul>
        <li><a class="helplink" target="_blank" href="https://docs.devexpress.com/Blazor/DevExpress.Blazor.Base.DxTreeViewBase.NodeTemplate">NodeTemplate</a></li>
        <li><a class="helplink" target="_blank" href="https://docs.devexpress.com/Blazor/DevExpress.Blazor.Base.DxTreeViewBase.NodeTextTemplate">NodeTextTemplate</a></li>
    </ul>
    <p>In unbound mode, you can create node templates on an individual basis. These templates have a priority over common templates. Use the following <a class="helplink" target="_blank" href="https://docs.devexpress.com/Blazor/DevExpress.Blazor.DxTreeViewNode">DxTreeViewNode</a> properties:</p>
    <ul>
        <li><a class="helplink" target="_blank" href="https://docs.devexpress.com/Blazor/DevExpress.Blazor.DxTreeViewNode.Template">Template</a></li>
        <li><a class="helplink" target="_blank" href="https://docs.devexpress.com/Blazor/DevExpress.Blazor.DxTreeViewNode.TextTemplate">TextTemplate</a></li>
    </ul>
</div>

<div class="card demo-card border-0">
    <div class="card-body py-0">
        <DxTreeView @ref="@treeView"
                    Data="@ComponentsData.ComponentSets"
                    ChildrenExpression="@(dataItem => ((ComponentSet)dataItem).ComponentSets)">
            <NodeTemplate>
                @{
                    var dataItem = (ComponentSet)context.DataItem;
                }
                @if (!context.IsLeaf)
                {
                    <h4 class="my-0 p-2 d-flex align-items-center justify-content-between">
                        <span class="mr-3">@dataItem.Title</span>
                        <small class="@GetExpandButtonCssClass(dataItem)" style="top: 0px"></small>
                    </h4>
                }
                else
                {
                    <div class="media p-2">
                        <img src=@dataItem.ImageUrl class="bg-primary rounded mr-3" style="padding: 2px; width: 30px; height: 30px;" alt="@dataItem.Title" />
                        <div class="media-body">
                            <h5 class="mt-0">@dataItem.Title</h5>
                            @dataItem.Description
                        </div>
                    </div>
                }
            </NodeTemplate>
        </DxTreeView>
    </div>
</div>

<div class="code-snippet card demo-card-wide">
    <CodeSnippetHeader></CodeSnippetHeader>
    <div class="card-footer text-muted">
        <CodeSnippet_TreeView_Templates />
    </div>
</div>

@code {
    DxTreeView treeView;

    string GetExpandButtonCssClass(ComponentSet nodeDataItem)
    {
        return String.Format("oi oi-chevron-{0}", treeView.GetNodeExpanded(n => n.DataItem == nodeDataItem) ? "bottom" : "right");
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
            treeView.ExpandAll();
        return base.OnAfterRenderAsync(firstRender);
    }
}

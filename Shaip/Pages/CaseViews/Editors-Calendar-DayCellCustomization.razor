@using Demo.Blazor.Model

<div class="demo-description" id="DayCellCustomization">
    <h2><DemoNavLink Link="Calendar#DayCellCustomization" />Calendar - Day Cell Customization</h2>
    <p>Use the calendar’s <a class="helplink" target="_blank" href="https://docs.devexpress.com/Blazor/DevExpress.Blazor.Base.DxCalendarBase.DayCellTemplate">DayCellTemplate</a> property to customize day cells.</p>
</div>

<div class="card demo-card border-0 bg-transparent">
    <div class="card-body p-0">
        <DxCalendar>
            <DayCellTemplate>
                <a class="@GetCssClassNames(context)">@context.Day.ToString()</a>
            </DayCellTemplate>
        </DxCalendar>
    </div>
</div>

<div class="code-snippet card demo-card-wide">
    <CodeSnippetHeader></CodeSnippetHeader>
    <div class="card-footer text-muted">
        <CodeSnippet_Editor_Calendar_DayCellCustomization></CodeSnippet_Editor_Calendar_DayCellCustomization>
    </div>
</div>

@code {
    DateTime BaseDate = DateTime.Today;

    string GetCssClassNames(DateTime date) {
        string result = string.Empty;

        if(GetPersonalDays().Exists(d => DaysEqual(d, date)))
            result = "font-weight-bold text-success";
        if(GetHolidays().Exists(d => DaysEqual(d, date)))
            result = "text-danger";
        if(GetBirthdays().Exists(d => DaysEqual(d, date)))
            result += "font-weight-bold text-info";

        return result;
    }
    bool DaysEqual(DateTime date1, DateTime date2) {
        return (date1.Year == date2.Year && date1.DayOfYear == date2.DayOfYear);
    }
    List<DateTime> GetPersonalDays() {
        return new List<DateTime>() { BaseDate.AddDays(-7), BaseDate.AddDays(-2), BaseDate.AddDays(-1), BaseDate.AddDays(3), BaseDate.AddDays(4), BaseDate.AddDays(9), BaseDate.AddDays(10), BaseDate.AddDays(12), BaseDate.AddDays(15) };
    }
    List<DateTime> GetHolidays() {
        return new List<DateTime>() { BaseDate.AddDays(-14), BaseDate.AddDays(-8),  BaseDate.AddDays(12), BaseDate.AddDays(13) };
    }
    List<DateTime> GetBirthdays() {
        return new List<DateTime>() { BaseDate.AddDays(-20),  BaseDate.AddDays(-5), BaseDate, BaseDate.AddDays(1), BaseDate.AddDays(6), BaseDate.AddDays(7), BaseDate.AddDays(17) };
    }
}
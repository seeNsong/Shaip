@using Demo.Blazor.Model

<div class="demo-description" id="Overview">
    <h2><DemoNavLink Link="FormLayout#Overview" />Form Layout - Overview</h2>
    <p>
        The DevExpress <a class="helplink" target="_blank" href="https://docs.devexpress.com/Blazor/DevExpress.Blazor.DxFormLayout">Form Layout</a> component for Blazor allows you to easily construct responsive and automatically-aligned edit forms.
    </p>
    <p>
        The Form Layout component uses the Bootstrap grid system markup: each layout item occupies between 1 and 12 virtual columns. This value can be defined separately for five different screen resolution types, as listed below:
    </p>
    <ol>
        <li><a class="helplink" target="_blank" href="https://docs.devexpress.com/Blazor/DevExpress.Blazor.Base.DxFormLayoutItemBase.ColSpanXl">ColSpanXl</a> - Extra large screens (1200px or wider).</li>
        <li><a class="helplink" target="_blank" href="https://docs.devexpress.com/Blazor/DevExpress.Blazor.Base.DxFormLayoutItemBase.ColSpanLg">ColSpanLg</a> - Large screens (992px or wider).</li>
        <li><a class="helplink" target="_blank" href="https://docs.devexpress.com/Blazor/DevExpress.Blazor.Base.DxFormLayoutItemBase.ColSpanMd">ColSpanMd</a> - Medium screens (768px or wider).</li>
        <li><a class="helplink" target="_blank" href="https://docs.devexpress.com/Blazor/DevExpress.Blazor.Base.DxFormLayoutItemBase.ColSpanSm">ColSpanSm</a> - Small screens (576px or wider).</li>
        <li><a class="helplink" target="_blank" href="https://docs.devexpress.com/Blazor/DevExpress.Blazor.Base.DxFormLayoutItemBase.ColSpanXs">ColSpanXs</a> - Extra small screens (less than 576px).</li>
    </ol>

</div>

<div class="card demo-card-wide">
    <div class="card-header">@nameof(Name)=<b>@(Name)</b>, @nameof(Email)=<b>@(Email)</b>, @nameof(Birthday)=<b>@(Birthday)</b>, @nameof(Worked)=<b>@(Worked)</b>, @nameof(AtVacation)=<b>@(AtVacation)</b></div>
    <div class="card-body">
        <DxFormLayout>
            <DxFormLayoutItem Caption="Contact Name:" ColSpanMd="6">
                <Template>
                    <DxTextBox @bind-Text="@Name"></DxTextBox>
                </Template>
            </DxFormLayoutItem>

            <DxFormLayoutItem Caption="Email:" ColSpanMd="6">
                <Template>
                    <DxTextBox @bind-Text="@Email"></DxTextBox>
                </Template>
            </DxFormLayoutItem>

            <DxFormLayoutItem Caption="Birthday:" ColSpanMd="6">
                <Template>
                    <DxDateEdit @bind-Date="@Birthday"></DxDateEdit>
                </Template>
            </DxFormLayoutItem>

            <DxFormLayoutItem Caption="Worked year(s):" ColSpanMd="6">
                <Template>
                    <DxSpinEdit @bind-Value="@Worked"></DxSpinEdit>
                </Template>
            </DxFormLayoutItem>

            <DxFormLayoutItem Caption="At Vacation:">
                <Template>
                    <DxCheckBox @bind-Checked="@AtVacation"></DxCheckBox>
                </Template>
            </DxFormLayoutItem>
        </DxFormLayout>

    </div>
</div>

<div class="code-snippet card demo-card-wide">
    <CodeSnippetHeader></CodeSnippetHeader>
    <div class="card-footer text-muted ">
        <CodeSnippet_FormLayout_Default />
    </div>
</div>

@code {
    string name = "Nancy Davolio";
    string Name { get => name; set { name = value; OnChanged(); } }

    string email = "NancyDavolio@sample.com";
    string Email { get => email; set { email = value; OnChanged(); } }

    DateTime birthday = DateTime.Now.AddYears(-20);
    DateTime Birthday { get => birthday; set { birthday = value; OnChanged(); } }

    int worked = 3;
    int Worked { get => worked; set { worked = value; OnChanged(); } }

    bool atVacation = true;
    bool AtVacation { get => atVacation; set { atVacation = value; OnChanged(); } }

    void OnChanged() { InvokeAsync(StateHasChanged); }
}

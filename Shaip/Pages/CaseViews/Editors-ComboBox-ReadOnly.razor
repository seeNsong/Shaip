@using Demo.Blazor.Model

<div class="demo-description" id="ReadOnly">
    <h2><DemoNavLink Link="ComboBox#ReadOnly" />ComboBox - Read-Only Mode</h2>
    <p>
        In this demo, the <a class="helplink" target="_blank" href="https://docs.devexpress.com/Blazor/DevExpress.Blazor.DxComboBox-1">ComboBox</a> displays values but does not allow users to change them.
        Set the <a class="helplink" target="_blank" href="https://docs.devexpress.com/Blazor/DevExpress.Blazor.Base.DxComboBoxBase-1.ReadOnly">ReadOnly</a> property to <b>true</b> to activate read-only mode.
    </p>
</div>

<div class="card demo-card">
    <div class="card-header">Option Selected: <b>@Option</b></div>
    <div class="card-body mw-480" style="height: 210px">
        <DxComboBox Data="@DataSource"
                    @bind-SelectedItem="@Option"
                    @bind-DropDownVisible="@DropDownVisible"
                    ReadOnly="true"/>
    </div>
</div>

<div class="code-snippet card demo-card-wide">
    <CodeSnippetHeader></CodeSnippetHeader>
    <div class="card-footer text-muted ">
        <CodeSnippet_Editor_ComboBox_ReadOnly></CodeSnippet_Editor_ComboBox_ReadOnly>
    </div>
</div>

@code {
    String[] DataSource = null;

    string option;
    string Option { get => option; set { option = value; InvokeAsync(StateHasChanged) ;} }

    bool dropDownVisible = true;
    bool DropDownVisible { get => dropDownVisible; set { dropDownVisible = value; InvokeAsync(StateHasChanged); }  }

    protected override void OnInitialized() { 
        DataSource = new string[] { "Option 1", "Option 2", "Option 3" };
        Option = DataSource[1];
    }
}
@using Demo.Blazor.Model
@using DevExpress.Blazor

<div class="demo-description" id="DataBinding">
    <h2><DemoNavLink Link="FormLayout#DataBinding" />Form Layout - Data Binding</h2>
    <p>
        You can use the <a class="helplink" target="_blank" href="https://docs.devexpress.com/Blazor/DevExpress.Blazor.DxFormLayout#bind-to-data">Form Layout</a> component to display and edit data from an external source.
        In this demo, such data source is assigned to the <a class="helplink" target="_blank" href="https://docs.devexpress.com/Blazor/DevExpress.Blazor.Base.DxFormLayoutBase.Data">Data</a> property.
        Form Layout items must be declared and bound to data source fields using the <a class="helplink" target="_blank" href="https://docs.devexpress.com/Blazor/DevExpress.Blazor.Base.DxFormLayoutItemBase.Field">Field</a> property.
        Each item automatically displays a DevExpress data editor suitable for the target data type. 
    </p>
    <p>
        You can override the default behavior and assign a custom editor to a layout item. To see an example, review the code for the Position item below.
    </p>
</div>

<div class="card demo-card-wide">
    <div class="card-header">DataObject = { @nameof(FormDataItem.Name)=<b>@(editFormData.Name)</b>, @nameof(FormDataItem.Birthday)=<b>@(editFormData.Birthday)</b>, @nameof(FormDataItem.Worked)=<b>@(editFormData.Worked)</b>, @nameof(FormDataItem.Position)=<b>@(editFormData.Position)</b> }</div>
    <div class="card-body">
        <DxFormLayout Data="@editFormData"
                      ItemUpdating="@((fieldName, newValue) => OnItemUpdating(fieldName, newValue))">

            <DxFormLayoutItem Field="@nameof(FormDataItem.Name)" Caption="Contact Name:" ColSpanMd="6" />

            <DxFormLayoutItem Field="@nameof(FormDataItem.Birthday)" Caption="Birthday:" ColSpanMd="6" />

            <DxFormLayoutItem Field="@nameof(FormDataItem.Worked)" Caption="Worked year(s):" ColSpanMd="6" />

            <DxFormLayoutItem Field="@nameof(FormDataItem.Position)" Caption="Position:" ColSpanMd="6">
                <Template>
                    <DxComboBox Data="@(new List<string>() { "Sales Representative", "Designer" })"
                                SelectedItem="@(((string)((ValueEditingContext)context).Value))"
                                SelectedItemChanged="@(value => ((ValueEditingContext)context).OnChanged(value))"></DxComboBox>
                </Template>
            </DxFormLayoutItem>
        </DxFormLayout>

    </div>
</div>

<div class="code-snippet card demo-card-wide">
    <CodeSnippetHeader></CodeSnippetHeader>
    <div class="card-footer text-muted ">
        <CodeSnippet_FormLayout_Default_DataBinding />
    </div>
</div>

@code {
    FormDataItem editFormData = new FormDataItem()
    {
        Name = "Nancy Davolio",
        Birthday = DateTime.Now.AddYears(-30),
        Worked = 3,
        Position = "Sales Representative"
    };

    void OnItemUpdating(string fieldName, object newValue)
    {
        if (fieldName == nameof(FormDataItem.Name))
        {
            editFormData.Name = newValue.ToString();
        }
        else if (fieldName == nameof(FormDataItem.Birthday))
        {
            editFormData.Birthday = (DateTime)newValue;
        }
        else if (fieldName == nameof(FormDataItem.Worked))
        {
            editFormData.Worked = (int)newValue;
        }
        else if (fieldName == nameof(FormDataItem.Position))
        {
            editFormData.Position = newValue.ToString();
        }

        InvokeAsync(StateHasChanged);
    }
}

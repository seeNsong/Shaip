@using System.ComponentModel.DataAnnotations

    <div class="demo-description" id="CustomForm">
        <h2><DemoNavLink Link="FormValidation#CustomForm" />Form Validation - Custom Form</h2>
        <p>
            The following example shows a standard <b>EditForm</b> component with a few DevExpress editors in it:
        </p>
        <ul>
            <li><a class="helplink" target="_blank" href="https://docs.devexpress.com/Blazor/DevExpress.Blazor.DxTextBox">Text Box</a></li>
            <li><a class="helplink" target="_blank" href="https://docs.devexpress.com/Blazor/DevExpress.Blazor.DxComboBox-1">ComboBox</a></li>
            <li><a class="helplink" target="_blank" href="https://docs.devexpress.com/Blazor/DevExpress.Blazor.DxSpinEdit-1">Spin Edit</a></li>
            <li><a class="helplink" target="_blank" href="https://docs.devexpress.com/Blazor/DevExpress.Blazor.DxDateEdit-1">Date Edit</a></li>
        </ul>
        <p>
            Once you attempt to submit changes, editors become marked with colored outlines.
            <span class="invalid" style="color:red;">Red</span> indicates invalid values, while
            <span class="modified" style="outline: 1px solid #26b050; color:#26b050;">green</span> indicates values that were posted successfully.
        </p>
        <p>
            The code also adds a standard <b>ValidationMessage</b> component for each editor to display error messages.
        </p>
    </div>

    <div class="card demo-card-wide">
        <div class="card-header">@FormValidationState</div>
        <div class="card-body">

            <EditForm Model="@starship" OnValidSubmit="@HandleValidSubmit" OnInvalidSubmit="@HandleInvalidSubmit">
                <DataAnnotationsValidator />

                <div style="height:100px">
                    <label for="identifier">Identifier: </label>
                    <DxTextBox Id="identifier" @bind-Text="@starship.Identifier" />
                    <ValidationMessage For="@(() => starship.Identifier)" />
                </div>
                <div style="height:100px">
                    <label for="classification">Primary Classification: </label>
                    <DxComboBox Id="classification" NullText="Select classification ..."
                                ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                                Data="@(new List<string>() { "Defense", "Exploration", "Diplomacy" })"
                                @bind-SelectedItem="@starship.Classification" />
                    <ValidationMessage For="@(() => starship.Classification)" />
                </div>
                <div style="height:100px">
                    <label for="accommodation">Maximum Accommodation: </label>
                    <DxSpinEdit Id="accommodation" @bind-Value="@starship.MaximumAccommodation" />
                    <ValidationMessage For="@(() => starship.MaximumAccommodation)" />
                </div>
                <div style="height:100px">
                    <label for="productionDate">Production Date: </label>
                    <DxDateEdit @bind-Date="@starship.ProductionDate" />
                    <ValidationMessage For="@(() => starship.ProductionDate)" />
                </div>

                <DxButton SubmitFormOnClick="true" Text="Submit" RenderStyle="@ButtonRenderStyle.Secondary" />

            </EditForm>
        </div>
    </div>

    <div class="code-snippet card demo-card-wide">
        <CodeSnippetHeader></CodeSnippetHeader>
        <div class="card-footer text-muted ">
            <CodeSnippet_FormValidation_Editors />
        </div>
    </div>

@code {
    string FormValidationState = @"Press the ""Submit"" button to validate the form.";
    private Starship starship = new Starship() { ProductionDate = DateTime.Now + TimeSpan.FromDays(1) };

    private void HandleValidSubmit()
    {
        FormValidationState = @"Form data is valid";
    }
    private void HandleInvalidSubmit()
    {
        FormValidationState = @"Form data is invalid";
    }

    [AttributeUsage(AttributeTargets.Property | AttributeTargets.Field | AttributeTargets.Parameter, AllowMultiple = false)]
    public class DateInPastAttribute: ValidationAttribute
    {
        public override bool IsValid(object value)
        {
            return (DateTime)value <= DateTime.Today;
        }
    }

    public class Starship
    {
        [Required(ErrorMessage = "The Identifier value should be specified.")]
        [StringLength(16,
        ErrorMessage = "The Identifier exceeds 16 characters.")]
        public string Identifier { get; set; }

        [Required(ErrorMessage = "The Primary Classification value should be specified.")]
        public string Classification { get; set; }

        [Range(1, 100000, ErrorMessage = "The Maximum Accommodation value should be a number between 1 and 100,000.")]
        public int MaximumAccommodation { get; set; }

        [Required]
        [DateInPastAttribute(ErrorMessage = "The Production Date value cannot be later than today.")]
        public DateTime ProductionDate { get; set; }
    }
}

@using Demo.Blazor.Model
@using Demo.Blazor.Services
@inject FlatProductService FlatProductService

<div class="demo-description" id="MultipleSelectedDataRows">
    <h2><DemoNavLink Link="GridSelection#MultipleSelectedDataRows" />Data Grid - Multiple Row Selection</h2>
    <p>
        Use the <a class="helplink" target="_blank" href="https://docs.devexpress.com/Blazor/DevExpress.Blazor.Base.DxDataGridBase-1.SelectionMode">SelectionMode</a> property to activate multiple selection in the <a class="helplink" target="_blank" href="https://docs.devexpress.com/Blazor/DevExpress.Blazor.DxDataGrid-1#row-selection">Data Grid</a> component. 
        The <a class="helplink" target="_blank" href="https://docs.devexpress.com/Blazor/DevExpress.Blazor.DataGridSelectionMode">DataGridSelectionMode.MultipleSelectedDataRows</a> selection mode allows you to specify the selected data rows via the <a class="helplink" target="_blank" href="https://docs.devexpress.com/Blazor/DevExpress.Blazor.Base.DxDataGridBase-1.MultipleSelectedDataRows">MultipleSelectedDataRows</a> property. 
        To track selection changes in this mode, use the <a class="helplink" target="_blank" href="https://docs.devexpress.com/Blazor/DevExpress.Blazor.Base.DxDataGridBase-1.MultipleSelectedDataRowsChanged">MultipleSelectedDataRowsChanged</a> event or the two-way synchronization as demonstrated in this module.
    </p>
    <p>
        Users can click multiple data rows to select them: to add/remove a row to/from the selection, click the row with the <kbd>Ctrl</kbd> key pressed. 
        To select multiple rows, click the first row, hold down the <kbd>Shift</kbd> key, and click the last row you want to be selected.
    </p>
</div>

@if (DataSource == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-8">
            <div class="card border-0">
                <DxDataGrid Data="@DataSource"
                            SelectionMode="DataGridSelectionMode.MultipleSelectedDataRows"
                            @bind-MultipleSelectedDataRows="@SelectedProducts"
                            ShowFilterRow="false">
                    <DxDataGridColumn Field="@nameof(ProductFlat.ProductName)" Caption="Product Name"></DxDataGridColumn>
                    <DxDataGridColumn Field="@nameof(ProductFlat.Category)"></DxDataGridColumn>
                    <DxDataGridColumn Field="@nameof(ProductFlat.Subcategory)"></DxDataGridColumn>
                </DxDataGrid>
            </div>
        </div>
        <div class="col-md-4">
            <div class="card mt-3 mt-md-0 h-100">
                <div class="card-header bg-transparent text-body py-1 border-bottom-0 font-weight-bold">Selected products:</div>
                <div class="card-body p-0">
                    <ul class="list-group list-group-flush bg-transparent border-0">
                        @foreach (var product in SelectedProducts)
                        {
                            <li class="list-group-item bg-transparent text-body py-1 border-0">@product.ProductName</li>
                        }
                    </ul>
                </div>
            </div>
        </div>
    </div>

    <div class="code-snippet card demo-card-wide">
        <CodeSnippetHeader></CodeSnippetHeader>
        <div class="card-footer text-muted">
            <CodeSnippet_Grid_Selection_Multiple />
        </div>
    </div>
}

@code {
    IQueryable<ProductFlat> DataSource;

    IEnumerable<ProductFlat> selectedProducts;
    IEnumerable<ProductFlat> SelectedProducts {
        get { return selectedProducts; }
        set {
            selectedProducts = value;
            InvokeAsync(StateHasChanged);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        DataSource = await FlatProductService.Load();
        SelectedProducts = DataSource.Take(4).AsEnumerable();
    }
}

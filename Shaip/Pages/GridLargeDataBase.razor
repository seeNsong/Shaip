@page "/GridLargeDataBase"

@using Demo.Blazor.Model

@inject FMRDemoContext FMRDemoContext
@inject IOptions<DemoConfiguration> DemoConfiguration

<div class="demo-description">
    <h2>Data Grid - Large Data Source</h2>

    <p>
        This demo shows the performance of the <a class="helplink" target="_blank" href="https://docs.devexpress.com/Blazor/DevExpress.Blazor.DxDataGrid-1#bind-to-data">data grid</a> when it is bound to a dataset that contains a million rows with a total size of over 1GB.
        Experiment with navigating between the pages and sorting the data to experience the responsiveness of the grid in this situation.
    </p>
    <p>
        In this example, Entity Framework Core (version 3.0) provides Data Grid with an <a class="helplink" target="_blank" href="https://docs.microsoft.com/ru-ru/dotnet/api/system.linq.iqueryable-1">IQueryable&lt;T&gt;</a> source.
    </p>
</div>
@if (!DemoConfiguration.Value.SiteMode)
{
    <div class="online-only-warrning card">
        <img src="images/Information.svg" alt="Information" />
        <p class="info-caption">To try this demo, please navigate to the <a href="https://demos.devexpress.com/blazor/GridLargeDataBase">online demo page</a>.</p>
        <p class="info-description">This demo is only accessible online because it uses a large data source that is hosted on a DevExpress internal database server.</p>
    </div>
    <div class="code-snippet card demo-card-wide">
        <CodeSnippetHeader></CodeSnippetHeader>
        <div class="card-footer text-muted">
            <CodeSnippet_GridLargeDataBase></CodeSnippet_GridLargeDataBase>
        </div>
    </div>
}
else
{
    if (largeDataSource == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <DxDataGrid Data="@largeDataSource" SelectionMode="DataGridSelectionMode.None" PageSize="10" KeyFieldName="Oid" ShowFilterRow="false">
            <DxDataGridColumn Field="@nameof(AreaRentInfo.State)" AllowSort="DefaultBoolean.False"></DxDataGridColumn>
            <DxDataGridColumn Field="@nameof(AreaRentInfo.Area)" AllowSort="DefaultBoolean.False"></DxDataGridColumn>
            <DxDataGridColumn Field="@nameof(AreaRentInfo.City)" Caption="County" AllowSort="DefaultBoolean.False"></DxDataGridColumn>
            <DxDataGridColumn Field="@nameof(AreaRentInfo.Name)" Caption="Location" AllowSort="DefaultBoolean.False"></DxDataGridColumn>
            <DxDataGridSpinEditColumn Field="@nameof(AreaRentInfo.Year)"></DxDataGridSpinEditColumn>
            <DxDataGridSpinEditColumn Field="@nameof(AreaRentInfo.Bedrooms)"></DxDataGridSpinEditColumn>
            <DxDataGridSpinEditColumn Field="@nameof(AreaRentInfo.Rent)">
                <DisplayTemplate>
                    @(((context as AreaRentInfo).Rent).ToString("C2"))
                </DisplayTemplate>
            </DxDataGridSpinEditColumn>
            <DxDataGridSpinEditColumn Field="@nameof(AreaRentInfo.Population)" AllowSort="DefaultBoolean.False">
                <DisplayTemplate>
                    @(((context as AreaRentInfo).Population).ToString("#,0"))
                </DisplayTemplate>
            </DxDataGridSpinEditColumn>
        </DxDataGrid>
    }
    <div class="code-snippet card demo-card-wide">
        <CodeSnippetHeader></CodeSnippetHeader>
        <div class="card-footer text-muted">
            <CodeSnippet_GridLargeDataBase></CodeSnippet_GridLargeDataBase>
        </div>
    </div>
}

@code {
    IQueryable<AreaRentInfo> largeDataSource;

    protected override void OnInitialized()
    {
        var dal = new EFDataAccessLayer(FMRDemoContext);
        largeDataSource = dal.GetQueryableAreaRentInfo();
    }
}
